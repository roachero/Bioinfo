#数据下载
geo = AnnoProbe::geoChina(gse='ID', mirror = 'tencent', destdir = '.') #镜像站下载
geo = getGEO(GEO='ID',destdir = '.',getGPL = T) #GEO下载

library(GEOquery)
library(BiocManager)
#提取表达矩阵,临床信息,芯片编号
gset1 <- getGEO(GEO='GSE53819',destdir = '.',getGPL = T)
exp <- exprs(gset1[[1]])
exp[1:4,1:4]
#exp = log2(exp+1)

pd <- pData(gset1[[1]])

gpl <- gset1[[1]]@annotation
rownames(pd)=as.vector(as.matrix(pd[,1]))
p = identical(rownames(pd),colnames(exp))

save(gset1,exp,pd,gpl,file = 'step2_output.Rdata') #保存到文件

#分组，芯片注释
rm(list = ls()) #清空当前环境下的所有变量
load('step2_output.Rdata') #加载Step2中保存的数据
library(stringr)#加载stringr包
table(colnames(exp)) #查看表达矩阵的列名
group_list = ifelse(str_detect(pd$source_name_ch1,'tumor'),'test','normal')
group_list = factor(group_list,
                    levels = c('test','normal'))#建立分组
group_list#查看分组信息
table(group_list)
if(T){
  a = getGEO(gpl,destdir = '.')
  b = a@dataTable@table
  colnames(b)
  ids2 = b[,c('ID','GENE_SYMBOL')] #根据实际值修改
  colnames(ids2) = c('probe_id','symbol')
  ids2 = ids2[ids2$symbol!='' & !str_detect(ids2$symbol,'///'),]
}#获取注释信息

save(group_list,ids2,exp,pd,file = 'step3_output.Rdata')

#成分分析
rm(list = ls()) #清空当前环境下的变量
load('step2_output.Rdata')
load('step3_output.Rdata')#加载数据

dat=as.data.frame(t(exp))#对表达矩阵进行转置操作并转换成数据框格式
library(FactoMineR)
library(factoextra)

dat.pca <- PCA(dat, graph = FALSE)
pca_plot <- fviz_pca_ind(dat.pca,
                         geom.ind = 'point',
                         col.ind = group_list,
                         palette = c('#00AFBB', '#E7B800'),
                         addEllipses = TRUE,
                         legend.title = 'Groups'
)#执行PCA

print(pca_plot)#查看PCA图

ggsave(plot = pca_plot, filename = paste0(gset1,'PCA.png')) #保存图片和数据
save(pca_plot, file = 'pca_plot.Rdata')

#差异分析
rm(list = ls())
load('step2_output.Rdata')
load('step3_output.Rdata')
library(limma)
design=model.matrix(~group_list)#根据 group_list 创建一个设计矩阵，用于差异比较的设计
fit=lmFit(exp, design)#将表达矩阵 exp 和设计矩阵 design 进行拟合将表达矩阵exp和设计矩阵 design 进行拟合
fit=eBayes(fit)#对拟合对象'fit'进行贝叶斯估计
deg=topTable(fit, coef=2, number = Inf)#从拟合对象 fit 中获取差异基因的结果
head(deg)#查看差异基因结果的前几行
library(dplyr)#向deg数据框添加几列
deg <- mutate(deg,probe_id=rownames(deg)) #将 deg 数据框中的行名作为新的列 probe_id 添加到 deg
#tibble::rownames_to_column(deg) #和上行代码等价
head(deg)
#合并表
table(deg$probe_id %in% ids2$probe_id) #比较 deg 数据框中的 probe_id 列和 ids 数据框中的 probe_id 列的匹配情况，并生成一个计数表，显示匹配和不匹配的数量。
#deg <- inner_join(deg,ids2,by="probe_id") #和上行代码等价
deg <- merge(x = deg,y = ids2, by="probe_id") #将 deg 数据框和 ids2 数据框按照 probe_id 列进行合并
deg <-deg[!duplicated(deg$symbol),] #找到 deg 数据框中的重复行，并使用逻辑索引 !duplicated(deg$symbol) 来删除重复行
dim(deg) #显示deg 数据框的维度
logFC_t=1.5#为后续火山图绘制增加一列(上调或下调)
#logFC_t=mean(deg$logFC)+2*sd(deg$logFC) #和上行代码作用一样，都是设置logFC 的阈值
change=ifelse(deg$P.Value>0.05,'stable',
              ifelse( deg$logFC >logFC_t,'up',
                      ifelse( deg$logFC < -logFC_t,'down','stable') )
) #根据条件判断，如果 P.Value 大于 0.05，则赋值为 'stable'；如果 logFC 大于 logFC_t，则赋值为 'up'；如果 logFC 小于 -logFC_t，则赋值为 'down'；否则赋值为 'stable'
deg <- mutate(deg, change) #将change列添加到deg数据框中。
head(deg) #显示deg的前几行
table(deg$change) #根据 deg 数据框的change列中的值创建频数表
#添加 ENTREZID 列，后续将在富集分析中使用
library(ggplot2) #载入 ggplot2 软件包，用于数据可视化
library(clusterProfiler) #载入 clusterProfiler 软件包，用于生物学注释和富集分析
library(org.Hs.eg.db) #载入 org.Hs.eg.db 软件包，该软件包包含了人类基因组的注释信息
s2e <- bitr(unique(deg$symbol), fromType = "SYMBOL",
            toType = c( 'ENTREZID'),
            OrgDb = org.Hs.eg.db) #将 deg 数据框中的 symbol 列的基因符号（SYMBOL）转换为对应的Entrez ID
head(s2e) #打印 s2e 对象的前几行，以查看基因符号到Entrez ID的转换结果
head(deg) #打印 deg 数据框的前几行，以查看处理前的结果
deg <- inner_join(deg,s2e,by=c("symbol"="SYMBOL")) #将 deg 数据框和 s2e 对象根据 symbol 列和 SYMBOL 列进行内连接（内部匹配），即将具有相同基因符号的行合并
head(deg) #查看基因注释后的前几个结果
save(logFC_t,deg,file = 'step5_output.Rdata') #保存数据，以便后续的分析使用


#火山图和热图来可视化差异差异基因表达数据
rm(list = ls()) #清除环境变量并加载包
load('step2_output.Rdata')
load('step3_output.Rdata')
load('step5_output.Rdata')
library(dplyr)
library(ggplot2)

dat <-mutate(deg,v=-log10(P.Value))#绘制火山图
if(T){
  for_label <-dat%>%
    filter(symbol %in% c('RUNX2','FN1'))
}
if(F){
  for_label <-dat %>% head(10)
}
if(F) {
  x1 = dat %>%
    filter(change == 'up') %>%
    head(3)
  x2 = dat %>%
    filter(change == 'down') %>%
    head(3)
  for_label = rbind(x1,x2)
}
p <- ggplot(data = dat,
            aes(x = logFC,
                y = v)) +
  geom_point(alpha=0.4, size=3.5,
             aes(color=change)) +
  ylab('-log10(Pvalue)')+
  scale_color_manual(values=c('blue', 'grey','red'))+
  geom_vline(xintercept=c(-logFC_t,logFC_t),lty=4,col='black',lwd=0.8) +
  geom_hline(yintercept = -log10(0.05), lty=4, col='black', lwd=0.8) +
  theme_bw()
p
volcano_plot <- p +
  geom_point(size = 3, shape = 1, data = for_label) +
  ggrepel::geom_label_repel(
    aes(label = symbol),
    data = for_label,
    color='black'
  )

volcano_plot
#ggsave(plot = volcano_plot, filename = paste0(gse,'volcano.png'))

cg=names(tail(sort(apply(exp,1,sd)),1000)) #绘制热图
n=exp[cg,]
annotation_col=data.frame(group=group_list)
rownames(annotation_col) = colnames(n)
library(pheatmap)
heatmap_plot <- pheatmap(n,
                         show_colnames=F,
                         show_rownames = F,
                         annotation_col = annotation_col,
                         scale = 'row')

library(ggplot2) # save the result
png(file = paste0(gset1,'heatmap.png'))
#ggsave(plot = heatmap_plot, filename = paste0(gse,'heatmap.png')) #手动保存
dev.off()
